1、JavaScript的简介
	* 是基于对象和事件驱动的语言，应用于客户端
		- 基于对象：
			** 提供好了很多对象，可以直接拿过来使用
		- 事件驱动：
			** HTML做网站静态效果，JavaScript动态效果
		- 客户端：专门指的是浏览器

	* JavaScript的特点
		（1）交互性
			- 信息的动态交互
		（2）安全性
			- JavaScript不能访问本地磁盘的文件
		（3）跨平台性
			- Java里面跨平台性：虚拟机
			- 只要能够支持JavaScript的浏览器，都可以运行

	* JavaScript和Java区别（雷锋和雷峰塔）
		（1）Java是sun公司，现在是Oracle公司，JavaScript是网景公司
		（2）JavaScript是基于对象的，Java是面向对象
		（3）Java是强类型语言，JavaScript是弱类型语言
			- 比如Java里面 int i = "10";  //错误
			- js：var i = 10; var m = "10";  //可以的
		（4）js只需要解析就可以执行，而Java需要先编译成字节码文件(.class)，再执行

	* js的组成
		三部分组成
		（1）ECMAScript
			- ECMA：欧洲计算机协会
			- 有ECMA组织指定的js的语法，语句
		（2）BOM
			- browser object model：浏览器对象模型
		（3）DOM
			- document object model：文档对象模型

2、js和HTML的两种结合方式
	第一种：
		- 使用一个标签 <script type="text/javascript"> js代码; </script>
	第二种：
		- 使用script标签，引入一个外部js文件
		*** 创建一个js文件，写js代码
		- <script type="text/javascript" src="js文件路径"></script>

	*** 使用第二种方式的时候，就不要在script标签里面写js代码了，不会执行。

3、js的原始类型和声明变量

	** Java的基本数据类型：byte、short、int、long、float、double、char、boolean

	** 定义变量 都是用关键字 var

	** js的原始类型（5个）
		- string：字符串
			*** var str = "abc";
		- number：数字
			*** var num = 123;
		- boolean：true和false
			*** var flag = true;

		- null（了解）
			*** var date = new Date();
			*** 获取对象的引用，null表示对象引用为空，所有对象的引用也是object
		- undefined
			*** 定义一个变量，没有赋值
			*** var aa;
	*** typeof();查看当前变量的数据类型

4、js的语句
	- Java里面的语句：
		** if判断
			*** =:表示赋值
			*** ==:表示判断
		** switch语句
		** 循环 for while do-while

	- js里面的也是这些语句
		** if判断
		** switch语句
			- Java里面数据类型string吗？ 在jdk1.7开始支持
			- js里面都支持

		** 循环 for while do-while
			for(var num=1; num<=3; num++) {}
	*** i++ 和 ++i 与Java里面的一样

5、js的运算
	
	** js里面不区分整数和小数
		var j = 123;
			alert(j/1000*1000);		//在Java里面结果是0 
			//在js里面不区分整数和小数 123/1000 = 0.123 *1000= 123;

	** 字符串的相加和相减的操作
		var str = "456";
			alert(str+1);	//在Java里面操作的结果是4561 在js里面还是4561
			alert(str-1);	//相减的时候，执行减法的运算
		*** 在做减法的时候，如果 var str = "abc";
			这时候提示NaN：表示不是一个数字
		
		*** boolean类型也可以操作
			*** 如果设置成true，相当于这个值是：1
			*** 如果设置成false，相当于这个值是：0
		
		*** == 和 === 区别
			** 都是做判断
			** == 比较的只是值
			** === 比较的是数值和类型

		*** 引入知识
			直接向页面输出的语句（可以把内容显示在页面上）
				* document.write("aaa");
				* document.write("<hr/>");	
				** 可以向页面输出变量、固定值和HTML代码

6、99乘法表的练习
	document.write("<table border='1' bordercolor='blue'>");
	for(var i=1; i<=9; i++) {
		document.write("<tr>");
		for(var j=1; j<=i; j++) {
			document.write("<td>");
			document.write(j + "*" + i + "=" + (j*i) );
			document.write("</td>");
		}
		document.write("</tr>");
	}
	document.write("</table>");

	- document.write里面是双引号，如果设置标签的属性需要使用单引号
	- document.write可以输出变量，还可以输出HTML代码

7、js的数组
	* 什么是数组？
		- 使用变量： var a = 10;
		- java里面数组的定义： int[] a = {1, 2, 3};

	*js的数组三种定义方式
		第一种：var arr = [1, 3, "string", true];
		第二种：使用内置对象  Array对象
			var arr2 = new Array(2);
			arr2[0] = "aaaaaaa";
			arr2[1] = 123456;

		第三种：使用内置对象  Array对象
			var arr3 = new Array(1, 2, true, "stirng");
			
	* 数组里面有一个属性 length：获取数组的长度

	* 数组可以存放不同的数据类型

8、js的函数
	** 在Java里面定义方法

	public int add(int a, int b) {
		return a+b;
	}

	** 在js里面定义函数（方法）有三种方式
		**** 函数的参数列表里面，不需要写var，直接写参数名称
		第一种：
			**** 使用一个关键字 function
			*** function 方法名(参数列表) {
				方法体;
				返回值可有可无（根据实际需求）
			}

			代码：
			function test() {
				alert("aaaaaaa");
			}
			//调用
			test();

			//定义一个有参数的方法，实现两个数的相加
			function add1(a, b) {
				//alert(a+b); 或者
				var sum = a+b;
				alert(sum);
			}
			add1(3, 4);

			//有返回值的效果
			function add2(a, b, c) {
				return a+b+c;
			}
			var result = add2(1, 2, 3);
			alert(result);

		第二种；
			**** 匿名函数
				var add = function(参数列表) {
					方法体和返回值;
				}
			*** 代码
			var add = function(m, n) {
				alert(m+n);
			}
			//调用
			add(1, 2);

		第三种方式：（用的少，了解）
			*** 动态函数
			*** 使用js里面的一个内置对象 Function
				new Function("参数列表","方法体和返回值");

9、js的全局变量和局部变量
	*** 全局变量：在script标签里面定义一个变量，这个变量在页面中js部分都可以使用
		- 在方法外部使用，在方法内部使用，在另外一个script标签中使用

	*** 局部变量：在方法内部定义一个变量，只能在方法内部调用
		- 如果在方法的外部调用这个变量，提示出错

10、script标签放在的位置
	* 建议把script标签放到</body>后面
	* 如果现在有这样一个需求
		在js里面需要获取到input里面的值，如果把script标签放到head里面，
		会出现问题。
		HTML解析是从上到下解析的，script标签放到head里面，直接在里面取input里面的值，因为页面
		还没有解析到input那一行，肯定取不到！

11、js的重载
	* 什么是重载？方法名相同，参数列表不同
		- Java里面有重载
	* js里面不存在重载！

			