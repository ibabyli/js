1、案例一：在末尾添加节点
	
	第一步：获取到ul标签
		var myUl = document.getElementById("ul的id");
	第二步：创建li标签
		var myLi = document.createElement("创建的标签名称，这里是li");
	第三步：创建文本
		var text = document.createTextNode("文本内容");
	第四步：把文本加入到li下面
		myLi.appendChild(text);
	第五步：把li加入到ul下面
		myUl.appendChild(myLi);

2、元素对象（element对象）
	** 要操作element对象，首先必须找到element
		- 使用document里面相应的方法获取

	** 方法
		*** 获取属性里面的值
			getAttribute(属性名称);
			//alert(input1.value);
			//alert(input1.getAttribute("value"));
			//可以通过此方法获取到class的值

		*** 设置属性的值
			input1.setAttribute("class","haha");
		
		*** 删除属性
			input1.removeAttribute("属性");
			** 不能删除value属性

		*** 想要获取标签下面的子标签
			** 使用属性 childNodes，但是这个属性兼容性很差
			** 获取标签下面子标签的唯一有效方法，使用getElementsByTagName()方法
			//获取li
			//此方法兼容性很差，不推荐使用
			//var lis = ul1.childNodes;
			//alert(lis.length);

			var lis = ul1.getElementsByTagName("li");
			alert(lis.length);

3、Node对象属性一
	
	* nodeName
	* nodeType
	* nodeValue

	* 使用dom解析HTML的时候，需要HTML里面的标签，属性和文本都封装成对象

	* 标签节点对应的值
		nodeType：1
		nodeName：大写的标签名称 比如：SPAN
		nodeValue：null

	* 属性节点对应的值
		nodeType：2
		nodeName：属性名称
		nodeValue：属性的值

	* 文本节点对应的值
		nodeType：3
		nodeName：#text
		nodeValue：文本内容

4、Node对象的属性二
	<ul id="uId">
		<li id="li1">aaa</li>
		<li id="li2">bbb</li>
		<li id="li3">ccc</li>
		<li id="li4">ddd</li>
	</ul>

	* 父节点
		- ul是li的父节点
		- parentNode

	* 子节点
		- li是ul的子节点
		- childNodes：得到所有的子节点，但是兼容性很差
		- firstChild：获得第一个子节点
		- lastChild：获取最后一个子节点

	* 同辈节点
		- li直接关系的是同辈节点
		- previousSibling：返回一个给指定节点的上一个兄弟节点
		- nextSibling：返回一个给定节点的下一个兄弟节点

5、操作dom树
	** appendChild()方法
		- 添加子节点到末尾
		- 特点：类似于剪切粘贴的效果

	** insertBefore(newNode, oldNode)方法
		- 在某个节点之间插入一个新的结点

		- 两个参数
			* 要插入的结点
			* 在谁之前插入

		- 插入一个节点，节点不存在，创建
			1、创建标签
			2、创建文本
			3、把文本添加到标签下面

		- 代码
			/*
				1、获取到li3标签
				2、创建li
				3、创建文本
				4、把文本添加到li下面
				5、获取ul
				6、把li添加到ul下面
			*/
			//对应的6步
			var li3 = document.getElementById("li3");
			var li = document.createElement("li");
			var text = document.createTextNode("刘亦菲");
			li.appendChild(text);
			var ul = document.getElementById("ul1");
			ul.insertBefore(li,li3);

	** 不存在 没有insertAfter()方法

	** removeChild()方法：删除节点
		- 通过父节点删除，不能自己删除自己
		
		- 代码：
		/*
			1、获取到li4标签
			2、获取父节点ul标签
			3、执行删除
		*/
		
		var li4 = document.getElementById("li4");
		//获取到父节点：；两个方法 
		//1、document.getElementById("id"); 2、parentNode属性
		var ul = li4.parentNode; //使用第二个
		ul.removeChild(li4);

	** replaceChild(newNode,oldNode)方法：替换节点
		- 两个参数
		** 第一个参数：新的节点（替换成的结点）
		** 第二个参数：旧的节点（被替换的结点）
		- 代码：
		/*
			1、获取到li4标签
			2、创建li
			3、创建文本
			4、把文本添加到li下面
			5、获取ul标签（父节点）
			6、执行替换操作
		*/
		
		var li4 = document.getElementById("li4");
		var li = document.createElement("li");
		var text = document.createTextNode("刘亦菲");
		li.appendChild(text);
		var ul = document.getElementById("ul1");
		ul.replaceChild(li,li4);

	** cloneNode(boolean)：复制节点
		
		- 代码：
			//把ul列表复制到另一个div里面
			function copy() {
			/*
				1、获取到ul标签
				2、执行复制方法，cloneNode(true);
				3、把复制之后的内容放到div里面
					** 获取到div
					** appendChild()方法
			*/
			
			var ul = document.getElementById("ul1");
			var copy = ul.cloneNode(true);
			var div = document.getElementById("div");
			div.appendChild(copy);
		}

	** 操作dom树总结
		* 获取节点方法
			getElementById("idValue");		//通过节点的id属性，找到对应的结点
			getElementsTagName("tagName");	//通过节点名称，找到对应的结点
			getElementsByName("nameValue"); //通过节点name属性，找到对应的结点

		* 插入节点
			insertBefore()方法，在某个节点之前插入
			appendChild()方法，在末尾添加结点，还有剪切粘贴

		* 删除节点
			removeChild()方法，通过父节点删除
		
		* 替换节点
			replaceChild()方法，通过父节点替换

6、innerHTML属性

	* 这个属性不是dom的组成部分，但是大多数浏览器都支持的属性

	第一个作用：获取文本内容
			//获取到span里面的内容
			var span = document.getElementById("span");
			alert(span.innerHTML);	//哼哼嘿嘿
			alert(span.value);	//undefine

	第二个作用：向标签里面设置内容（可以是HTML代码）
			//设置di里面的内容
			var div = document.getElementById("div");
			div.innerHTML = "<h3>大大大，小小小</h3>";

7、案例二：动态显示时间
	
	* 得到当前的时间
		var date = new Date();
		var d1 = date.toLocaleString();
	
	* 需要让页面每一秒获取时间
		setInterval()方法	定时器

	* 显示到页面上
		每一秒向div里面写一次时间
			* 使用innerHTML属性

	* 代码
		function getTime() {
				
			//获取时间
			var date = new Date();
			var d1 = date.toLocaleString();
			//把时间写到div里面
			//首先需要获取到div
			var div = document.getElementById("times");
			div.innerHTML = d1;
		}

		//使用定时器，实现每秒写一次时间
		setInterval("getTime();", 1000);

8、案例三：全选练习
	
	* 创建一个页面
		** 复选框和按钮
			- 四个复选框表示爱好
			- 还有一个复选框操作 全选和全不选，也有一个事件
		
		** 三个按钮，分别有事件
			- 全选
			- 全不选
			- 反选

	* 全选操作
		/*
			1、获取复选框的操作
				- 使用getElementsByName();
			2、返回是一个数组：
				- 属性：
					*** checked = true;	//表示选中
					*** checked = false;//表示没选中
				- 遍历数组：得到的是每一个checkbox
					* 把每一个checkboxchecked属性设置为true

		*/

	* 全不选操作
		//实现全不选的操作，只需要将checked属性设置为false，其他的和全选操作是一样的

	* 反选操作
		//实现反选的操作，需要判断复选框是否选中，（checked==true），如果选中，设置为false，否则设置为true

	* 实现复选框全选和全不选
		//实现全选和全不选，如果这个复选框是选中状态，调用全选方法，如果不是选中状态，调用全不选方法

9、案例四：下拉列表左右选择
	
	* 下拉选择框
		<select>
			<option>西施</option>
			<option>王昭君</option>
			<option>貂蝉</option>
			<option>杨玉环</option>
		</select>

	* 创建一个页面
		** 两个下拉选择框
			- 设置属性 multiple="multiple"
		** 四个按钮，有事件

	
	* 选中添加到右边的事件		
		/*
			1、获取select里面的option
				- getElementsByTagName()方法
			2、判断是否选中
				- 属性：
					** selected == true; 选中
					** selected==false:没有选中

			3、把选中的添加到右边
			4、得到select2
			5、添加选择方法
				- appendChild()方法
		*/

	* 全选添加到右边的事件
		/*
			和选择添加到右边相比，少了一个  不需要判断 selected属性
		*/

	* 选中添加到左边的事件
		/*
			通选择添加到右边相比，只不过操作相反了而已
		*/

	* 全选添加到右边的事件
		/*
			和全部添加到右边相比，操作相反而已
		*/

10、案例五：省市联动
	* 创建一个页面，有两个下拉选择框
	* 在第一个下拉框里面有一个事件：改变事件：onchange事件
		- 方法add1(this.value)：表示当前改变的option里面的value值
	* 创建一个二维数组，存储数据
		* 在每个数组中第一个元素是国家名称，后面的元素是国家里面的城市
	
	/*
		1、遍历二维数组
		2、得到的也是一个数组（国家对应关系）
		3、拿到数组中的第一个元素和传递过来的值作比较
		4、如果相同，获取到第一个值后面的元素
		5、得到city的select
		6、添加过去 appendChild方法
			- 创建option （三步）
	*/

	/*
		由于每次都向city里面添加option
		第二次添加，变成了追加
			* 每次添加之前，判断一下city里面是否有option，如果有，删除
	*/

11、案例六：动态生成表格
	* 创建一个页面：两个输入框和一个按钮

	* 代码和步骤

		/*
			1、得到输入的行和列
			2、生成表格
				** 循环行
				** 在行里面循环单元格
			3、显示在页面上
				- 把表格的代码设置到div里面
				- 使用innerHTML属性
		*/

		var h = document.getElementById("h").value;
		var l = document.getElementById("l").value;
		var tab = "<table border='1' bordercolor='blue'>"
		for(var i=1; i<=h; i++) {
			tab += "<tr>"
				for(var j=1; j<=l; j++) {
					tab += "<td>world</td>"
				}
			tab += "</tr>"
		}

		tab += "</table>"
		//alert(tab);
		var div = document.getElementById("div");
		div.innerHTML = tab;